spring:
  application:
    name: kokomen-interview-api
  profiles:
    include:
      - common
  jackson:
    property-naming-strategy: SNAKE_CASE
    default-property-inclusion: non_null
  session:
    store-type: redis
  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: 1
    properties:
      security.protocol: PLAINTEXT
server:
  servlet:
    session:
      timeout: 24h
      cookie:
        name: JSESSIONID
        path: /
        http-only: true
        same-site: lax
        max-age: 86400
  tomcat:
    threads:
      min-spare: 20
      max: 30
    max-connections: 1024
    mbeanregistry:
      enabled: true
open-ai:
  api-key: ${OPEN_AI_API_KEY}
management:
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
  server:
    port: 8081
    address: 0.0.0.0
notification:
  connect-timeout: 3s
  read-timeout: 3s
supertone:
  api-token: ${SUPERTONE_API_TOKEN}

---
# local profile
spring:
  config:
    activate:
      on-profile: local
  kafka:
    bootstrap-servers: kokomen-local-kafka:9092
oauth:
  kakao:
    client-id: ${KAKAO_CLIENT_ID}
    client-secret: ${KAKAO_CLIENT_SECRET}
    admin-key: ${KAKAO_ADMIN_KEY}
cors:
  allowed-origins: http://localhost:8080
server:
  servlet:
    session:
      cookie:
        secure: true
notification:
  base-url: http://kokomen-notification-local-internal:8080 # 컨테이너 이름으로 직접 요청
payment:
  base-url: http://kokomen-payment-local-internal:8080
aws:
  root-question-s3-path: local/root-question-voice/
  next-question-s3-path: local/next-question-voice/

---
# dev profile
spring:
  config:
    activate:
      on-profile: dev
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
oauth:
  kakao:
    client-id: ${KAKAO_CLIENT_ID_DEV}
    client-secret: ${KAKAO_CLIENT_SECRET_DEV}
    admin-key: ${KAKAO_ADMIN_KEY_DEV}
cors:
  allowed-origins: https://dev.kokomen.kr, https://kokomen.kr:3000, https://local.kokomen.kr:3000, http://local.kokomen.kr:3000, https://www.webview-dev.kokomen.kr, https://webview-dev.kokomen.kr
server:
  servlet:
    session:
      cookie:
        domain: kokomen.kr
        secure: false
notification:
  base-url: http://kokomen-notification-dev-internal:8080 # 컨테이너 이름으로 직접 요청
payment:
  base-url: http://kokomen-payment-dev-internal:8080
aws:
  root-question-s3-path: dev/root-question-voice/
  next-question-s3-path: dev/next-question-voice/
---

# prod profile
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
oauth:
  kakao:
    client-id: ${KAKAO_CLIENT_ID_PROD}
    client-secret: ${KAKAO_CLIENT_SECRET_PROD}
    admin-key: ${KAKAO_ADMIN_KEY_PROD}
cors:
  allowed-origins: https://kokomen.kr, https://www.kokomen.kr
server:
  servlet:
    session:
      cookie:
        domain: kokomen.kr
        secure: true

notification:
  base-url: ${NOTIFICATION_BASE_URL_PROD}
payment:
  base-url: ${PAYMENT_BASE_URL_PROD}
aws:
  root-question-s3-path: prod/root-question-voice/
  next-question-s3-path: prod/next-question-voice/
---
# load-test profile
spring:
  config:
    activate:
      on-profile: load-test
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
oauth:
  kakao:
    client-id: ${KAKAO_CLIENT_ID_PROD}
    client-secret: ${KAKAO_CLIENT_SECRET_PROD}
    admin-key: ${KAKAO_ADMIN_KEY_PROD}
cors:
  allowed-origins: https://kokomen.kr, https://www.kokomen.kr, https://www.webview.kokomen.kr, https://webview.kokomen.kr
server:
  servlet:
    session:
      cookie:
        domain: kokomen.kr
        secure: true

notification:
  base-url: ${NOTIFICATION_BASE_URL_PROD}
payment:
  base-url: ${PAYMENT_BASE_URL_LOAD_TEST}
aws:
  root-question-s3-path: dev/root-question-voice/
  next-question-s3-path: dev/next-question-voice/
